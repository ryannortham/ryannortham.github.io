[ { "title": "Automate Azure Service principals and Terraform Cloud Variables using Fish Shell", "url": "/posts/automate-azure-service-principals-and-terraform-cloud-variables-using-fish-shell/", "categories": "Blogging, Tutorial", "tags": "azure, terraform, fish", "date": "2021-12-02 16:00:00 +1100", "snippet": "IntroductionIn this tutorial I’ll show you how to create an Azure Service principal using Azure CLI, and automatically upload the service principal details to Terraform Cloud. This approach minimises ‘click-ops’ and sets us up to use Terraform Cloud to deploy our Azure infrastructure.Prerequisite TasksCommand-line ToolsInstall the following command-line tools if you don’t already have them setup in your development environment:Fish ShellMy shell of choice for this tutorial. It has great features like syntax highlighting and auto completion working out of the box. Its syntax is a little different from bash, but this shouldn’t be a huge leap if you are already familiar with bash.Azure CLIWe’ll use this to connect to Azure and create our service principal. Install it by running:curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bashjqA lightweight command-line JSON processor. We’ll use this to extract the service principal details returned by Azure CLI. Install it by running:sudo apt-get install jqTerraform Cloud AccountUse the following Hashicorp guides to setup your Terraform Cloud account if you don’t already have one: A Terraform Cloud account: Create a Terraform Cloud account and organisation A workspace: Create a workspace An API token: Generate an API token ℹ️ Note: The API token will only be displayed once. Be sure to store it somewhere secure, and avoid checking it into source control.Set Terraform Cloud VariablesTake the organisation name, workspace name, and access token from the previous step and set them as variables in our script:#!/bin/fish# Set Terraform Cloud variablesset TF_ORG &quot;&amp;lt;insert tf cloud organisation name&amp;gt;&quot;set TF_WORKSPACE &quot;&amp;lt;insert tf cloud workspace name&amp;gt;&quot;set TF_TOKEN &quot;&amp;lt;insert tf cloud token&amp;gt;&quot;Set Azure variablesIn the Azure portal, go to your target subscription and take note of the subscription id and tenant name:Store these values in environment variables. We’ll also set name of the service principal that we want to create here:set ARM_SUB_ID &quot;&amp;lt;insert target subscription id&amp;gt;&quot;set ARM_TENANT_NAME &quot;&amp;lt;insert Azure tenant name&amp;gt;&quot;set ARM_SP_NAME &quot;sp-example&quot;That’s all of the manual setups tasks done! We now have enough information to automate the rest of the process.Script ExplanationService principal CreationHere we’ll use Azure CLI to access our subscription and create the service principal for Terraform Cloud. Azure CLI returns the principal details as a json response - we’ll store this in the ARM_SP_DETAILS variable:az login --tenant $ARM_TENANT_NAME.onmicrosoft.comaz account set --subscription $ARM_SUB_IDset ARM_SP_DETAILS (az ad sp create-for-rbac --role contributor --name $ARM_SP_NAME --sdk-auth)Extract Service principal Properties Using jq:The json response contains the information we need to store in Terraform Cloud - we’ll use jq to extract the required elements. The --raw-output option prevents the guids from being converted to strings, which would cause issues with our script further down the track.set ARM_CLENT_ID (echo $ARM_SP_DETAILS | jq &#39;.clientId&#39; --raw-output)set ARM_CLIENT_SECRET (echo $ARM_SP_DETAILS | jq &#39;.clientSecret&#39; --raw-output)set ARM_TENANT_ID (echo $ARM_SP_DETAILS | jq &#39;.tenantId&#39; --raw-output)Set Terraform Cloud VariablesNow that we’ve created our Azure service principal, we’re going to pass its details to the Terraform Cloud API. The API accepts data in following json format/template, which we’ll write out to a temporary file:echo &#39;{ &quot;data&quot;: { &quot;type&quot;:&quot;vars&quot;, &quot;attributes&quot;: { &quot;key&quot;:&quot;my-key&quot;, &quot;value&quot;:&quot;my-value&quot;, &quot;category&quot;:&quot;env&quot;, &quot;hcl&quot;:false, &quot;sensitive&quot;:true, &quot;description&quot;:&quot;&quot; } }, &quot;relationships&quot;: { &quot;workspace&quot;: { &quot;data&quot;: { &quot;id&quot;:&quot;my-workspace&quot;, &quot;type&quot;:&quot;workspaces&quot; } } }}&#39; | cat &amp;gt; variable.template.jsonCreate Data StructureI would have liked to use a dictionary to store our variable key-value pairs, but unfortunately Fish does not support this natively. I’m just going to create a pair of arrays here as a quick-and-dirty workaround:set -l varkey \\ ARM_CLIENT_ID \\ ARM_CLIENT_SECRET \\ ARM_SUBSCRIPTION_ID \\ ARM_TENANT_IDset -l varvalue \\ $ARM_CLIENT_ID \\ $ARM_CLIENT_SECRET \\ $ARM_SUBSCRIPTION_ID \\ $ARM_TENANT_IDLoop Through the Data to Upload Each Variable to Terraform CloudHere we’ll loop through our ‘dictionary’ and substitute our key-values into the json template using sed, before writting the payload out to another temporary file. We then use curl to send the json to the Terraform Cloud API, using the token we created earlier.for i in (seq 1 (count $varkey)) sed -e &quot;s/my-workspace/$TF_WORKSPACE/&quot; -e &quot;s/my-key/$varkey[$i]/&quot; -e &quot;s/my-value/$varvalue[$i]/&quot; &amp;lt; variable.template.json &amp;gt; variable.json echo &quot;Setting variable $varkey[$i] with value $varvalue[$i]&quot; curl -s --header &quot;Authorization: Bearer $TF_TOKEN&quot; --header &quot;Content-Type: application/vnd.api+json&quot; --data @variable.json &quot;https://app.terraform.io/api/v2/vars?filter%5Borganization%5D%5Bname%5D=$TF_ORG&amp;amp;filter%5Bworkspace%5D%5Bname%5D=$TF_WORKSPACE&quot;endClean up temporary filesrm variable.template.jsonrm variable.jsonCheck ResultsAzure Service principalOpen the Azure portal and go to Azure AD &amp;gt; App registrations. You should be able to see your service principal:Terraform Cloud VariablesIn Terraform Cloud, open your workspace and go to variables:Full Script#!/bin/fish# Set Terraform Cloud variablesset TF_ORG &quot;&amp;lt;insert tf cloud organisation name&amp;gt;&quot;set TF_WORKSPACE &quot;&amp;lt;insert tf cloud workspace name&amp;gt;&quot;set TF_TOKEN &quot;&amp;lt;insert tf cloud token&amp;gt;&quot;# Set Azure variablesset ARM_SUB_ID &quot;&amp;lt;insert target subscription id&amp;gt;&quot;set ARM_TENANT_NAME &quot;&amp;lt;insert Azure tenant name&amp;gt;&quot;set ARM_SP_NAME &quot;sp-example&quot;# Service principal creationaz login --tenant $ARM_TENANT_NAME.onmicrosoft.comaz account set --subscription $ARM_SUBSCRIPTION_IDset ARM_SP_DETAILS (az ad sp create-for-rbac --role contributor --name $ARM_SP_NAME --sdk-auth)set ARM_CLIENT_ID (echo $ARM_SP_DETAILS | jq &#39;.clientId&#39; --raw-output)set ARM_CLIENT_SECRET (echo $ARM_SP_DETAILS | jq &#39;.clientSecret&#39; --raw-output)set ARM_TENANT_ID (echo $ARM_SP_DETAILS | jq &#39;.tenantId&#39; --raw-output)echo &#39;{ &quot;data&quot;: { &quot;type&quot;:&quot;vars&quot;, &quot;attributes&quot;: { &quot;key&quot;:&quot;my-key&quot;, &quot;value&quot;:&quot;my-value&quot;, &quot;category&quot;:&quot;env&quot;, &quot;hcl&quot;:false, &quot;sensitive&quot;:true, &quot;description&quot;:&quot;&quot; } }, &quot;relationships&quot;: { &quot;workspace&quot;: { &quot;data&quot;: { &quot;id&quot;:&quot;my-workspace&quot;, &quot;type&quot;:&quot;workspaces&quot; } } }}&#39; | cat &amp;gt; variable.template.json# Create data structuresset -l varkey \\ ARM_CLIENT_ID \\ ARM_CLIENT_SECRET \\ ARM_SUBSCRIPTION_ID \\ ARM_TENANT_IDset -l varvalue \\ $ARM_CLIENT_ID \\ $ARM_CLIENT_SECRET \\ $ARM_SUBSCRIPTION_ID \\ $ARM_TENANT_ID# Loop through the data to upload each variable to tf cloudfor i in (seq 1 (count $varkey)) sed -e &quot;s/my-workspace/$TF_WORKSPACE/&quot; -e &quot;s/my-key/$varkey[$i]/&quot; -e &quot;s/my-value/$varvalue[$i]/&quot; &amp;lt; variable.template.json &amp;gt; variable.json echo &quot;Setting variable $varkey[$i] with value $varvalue[$i]&quot; curl -s --header &quot;Authorization: Bearer $TF_TOKEN&quot; --header &quot;Content-Type: application/vnd.api+json&quot; --data @variable.json &quot;https://app.terraform.io/api/v2/vars?filter%5Borganization%5D%5Bname%5D=$TF_ORG&amp;amp;filter%5Bworkspace%5D%5Bname%5D=$TF_WORKSPACE&quot;end# Clean up temporary filesrm variable.template.jsonrm variable.jsonReferencesI used code from this Terraform script as inspiration for this script. It’s more comprehensive with error checking and data import options, if that’s what you’re after." } ]
